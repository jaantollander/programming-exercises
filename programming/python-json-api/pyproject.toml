[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "simple-json-api"
version = "1.0.0"
description = "A FastAPI-based JSON API with JWT and OIDC authentication"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["fastapi", "api", "jwt", "oidc", "authentication"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    "fastapi[standard]>=0.116.0",
    "uvicorn[standard]>=0.35.0",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "requests>=2.32.0",
    "pydantic-settings>=2.10.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.0",
    "httpx>=0.28.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
]
test = [
    "pytest>=8.4.0",
    "httpx>=0.28.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/simple-json-api"
Repository = "https://github.com/yourusername/simple-json-api.git"
Issues = "https://github.com/yourusername/simple-json-api/issues"

[project.scripts]
simple-json-api = "main:app"

[tool.hatch.build.targets.wheel]
packages = ["main.py", "oidc_config.py"]

[tool.pytest.ini_options]
testpaths = ["."]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py310"
exclude = [
    ".git",
    "__pycache__",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "S",   # bandit
]
ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by formatter)
    "S101",  # use of assert
    "S608",  # possible SQL injection (false positives)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["S101", "ARG001", "ARG002"]

[tool.ruff.lint.isort]
known-first-party = ["main", "oidc_config"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "jose.*",
    "passlib.*",
    "requests.*",
]
ignore_missing_imports = true

